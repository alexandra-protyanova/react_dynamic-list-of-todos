{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Options","API","TodoList","addUserId","selectedUserId","useState","todos","setTodos","input","setInput","all","option","setOption","useEffect","fetch","then","response","ok","json","Promise","reject","allTodos","catch","err","alert","filteredTodos","filter","todo","title","toLowerCase","includes","filterOption","active","completed","handleOptions","className","type","value","onChange","event","target","onClick","copyOfTodos","i","length","rev","Math","floor","random","map","classnames","readOnly","checked","userId","id","CurrentUser","changeUser","selectedUser","setSelectedUser","user","name","email","phone","App","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac51bb8f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\nimport { getTodos } from '../../api';\n\ntype Props = {\n  addUserId: (userId: number) => void,\n  selectedUserId: number,\n};\n\nenum Options {\n  all,\n  active,\n  completed,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  addUserId, selectedUserId,\n}) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [input, setInput] = useState('');\n  const [option, setOption] = useState<Options>(Options.all);\n\n  useEffect(() => {\n    getTodos()\n      .then(allTodos => setTodos(allTodos))\n      .catch((err) => {\n        alert(`${err}`);\n      });\n  }, []);\n\n  const handleOptions = (filterOption: Options, todo: Todo) => {\n    switch (filterOption) {\n      case Options.active:\n        return todo.completed === false;\n      case Options.completed:\n        return todo.completed === true;\n      default:\n        return true;\n    }\n  };\n\n  const filteredTodos = todos\n    .filter(todo => todo.title.toLowerCase().includes(input.toLowerCase())\n    && handleOptions(option, todo));\n\n  const randomizer = () => {\n    const copyOfTodos = [...todos];\n\n    for (let i = copyOfTodos.length - 1; i >= 0; i -= 1) {\n      const rev = Math.floor(Math.random() * (i + 1));\n\n      [copyOfTodos[i], copyOfTodos[rev]] = [copyOfTodos[rev], copyOfTodos[i]];\n    }\n\n    setTodos(copyOfTodos);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          data-cy=\"filterByTitle\"\n          value={input}\n          onChange={(event) => {\n            setInput(event.target.value);\n          }}\n        />\n        <select\n          value={option}\n          onChange={(event) => {\n            setOption(+event.target.value);\n          }}\n        >\n          <option value={Options.all}>All</option>\n          <option value={Options.active}>Active</option>\n          <option value={Options.completed}>Completed</option>\n        </select>\n        <button\n          type=\"button\"\n          onClick={randomizer}\n        >\n          Randomize\n        </button>\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {filteredTodos.map(todo => (\n            <li\n              className={classnames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classnames(\n                  'TodoList__user-button',\n                  'button',\n                  {\n                    'TodoList__user-button--selected':\n                       todo.userId === selectedUserId,\n                  },\n                )}\n                type=\"button\"\n                onClick={() => {\n                  addUserId(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API = 'https://mate.academy/students-api';\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(`${API}/todos`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUser = (id: number): Promise<User> => {\n  return fetch(`${API}/users/${id}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  changeUser: (id: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, changeUser }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>();\n\n  useEffect(() => {\n    getUser(userId)\n      .then(user => setSelectedUser(user))\n      .catch(() => {\n        changeUser(0);\n        setSelectedUser(null);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${selectedUser?.id}`}</span>\n      </h2>\n\n      <h3\n        className=\"CurrentUser__name\"\n        data-cy=\"userName\"\n      >\n        {selectedUser?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n      <button\n        type=\"button\"\n        data-cy=\"userButton\"\n        onClick={() => {\n          changeUser(0);\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          addUserId={selectUser}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              changeUser={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}